set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
cmake_minimum_required(VERSION 2.8.7)
project(sliprock)
cmake_policy(VERSION "${CMAKE_VERSION}")
enable_language(C CXX)
include(GNUInstallDirs)
include_directories(. include "${CMAKE_CURRENT_BINARY_DIR}")
set(THREADS_PREFER_PTHREAD_FLAG 1)
find_package(Threads)
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/Modules")
if(WINDOWS)
   add_definitions(-DUNICODE -D_UNICODE)
endif()

set(both_flag_list Werror Wall Wextra Weverything Wno-padded
   Wno-gnu-statement-expression Wformat=2 Wstrict-aliasing=5 Wstrict-overflow=5)

if (WINDOWS)
   set(both_flag_list "${both_flag_list};-static-libgcc;-static-libstdc++")
endif()

if (SLIPROCK_TRACE) # AND NOT SLIPROCK_TRACE STREQUAL "Release"
   add_definitions(-DSLIPROCK_TRACE)
endif()

set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O0")
set(cxx_flag_list Wno-old-style-cast "Wno-c\\\\\\\\+\\\\\\\\+98-compat" std=c++11
    Wno-global-constructors Wno-c99-extensions)
set(c_flag_list "Wno-c\\\\\\\\+\\\\\\\\+-compat" std=c89)
set(CMAKE_CXX_STANDARD 11)
function(check_compiler_lang_flags LANG ARGN)
   if (NOT LANG MATCHES "^(C|CXX)$")
      message(FATAL_ERROR "bad LANG passed to check_compiler_lang_flags")
   endif()
   include("Check${LANG}CompilerFlag")
   foreach(my_flag ${both_flag_list} ${ARGN})
      string(REGEX REPLACE "[^A-Za-z0-9_]" _ mytest_name "${my_flag}_${LANG}")
      if (LANG MATCHES CXX)
         check_cxx_compiler_flag("-${my_flag}" "${mytest_name}")
      else()
         check_c_compiler_flag("-Werror -${my_flag}" "${mytest_name}")
      endif()
      if (${mytest_name})
         string(REPLACE "\\" "" my_flag "${my_flag}")
         set("CMAKE_${LANG}_FLAGS" "${CMAKE_${LANG}_FLAGS} -${my_flag}")
      endif()
   endforeach()
   set("CMAKE_${LANG}_FLAGS_DEBUG" "${CMAKE_${LANG}_FLAGS} -O0" PARENT_SCOPE)
   set("CMAKE_${LANG}_FLAGS" "${CMAKE_${LANG}_FLAGS}" PARENT_SCOPE)
endfunction()

if (WIN32)
   add_definitions(-DWIN32_LEAN_AND_MEAN)
endif()
if (NOT MSVC)
   if(UNIX)
      # Check for openat()
      add_definitions(-D_GNU_SOURCE)
      set(AT_HEADERS sys/stat.h sys/types.h fcntl.h)
      check_symbol_exists(openat "${AT_HEADERS}" HAVE_OPENAT)
      check_symbol_exists(renameat "fcntl.h;stdio.h" HAVE_RENAMEAT)
      include(CheckIncludeFiles)
      check_include_files(stdint.h HAVE_STDINT_H)
      check_include_files(inttypes.h HAVE_INTTYPES_H)
      check_include_files(sys/inttypes.h HAVE_SYS_INTTYPES_H)

      include(CheckCSourceCompiles)
      list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE)
      check_c_source_compiles([[
         #include <stddef.h>
         #include <sys/types.h>
         #include <sys/socket.h>
         int main(void) { 
            int res = accept4(0, NULL, NULL, SOCK_CLOEXEC);
         }]] HAVE_ACCEPT4)
      if (NOT HAVE_ACCEPT4)
         message(WARNING "Cannot atomically make sockets close-on-exec")
      endif()
   endif()
   if (NOT MSVC AND 0)
   check_compiler_lang_flags(C "${c_flag_list}")
endif()

endif()
find_package(Boost COMPONENTS unit_test_framework)

find_package(Threads)
if (THREADS_FOUND)
   find_package(Boost COMPONENTS unit_test_framework)
   if (Boost_UNIT_TEST_FRAMEWORK_FOUND AND NOT DEFINED SLIPROCK_NO_TESTS)
      enable_language(CXX)
      set(SLIPROCK_ENABLE_TEST ON)
      if (NOT MSVC)
         check_compiler_lang_flags(CXX ${cxx_flag_list})
      endif()
   else()
      message(WARNING "Tests disabled")
   endif()
else()
   message(WARNING "No thread library found.  Disabling thread-safety and unit-testing.")
   add_definitions(-DSLIPROCK_NO_THREADS)
endif()

add_subdirectory(src)
add_subdirectory(interactive)
if (SLIPROCK_ENABLE_WIP)
   add_subdirectory(wip)
endif()

configure_file(config.h.in config.h)

add_definitions(-UNDEBUG)
install(FILES include/sliprock.h DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}")
